(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{165:function(t,a,s){"use strict";s.r(a);var r=s(0),e=Object(r.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"es6基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6基础"}},[t._v("#")]),t._v(" ES6基础")]),t._v(" "),s("h2",{attrs:{id:"类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[t._v("#")]),t._v(" 类")]),t._v(" "),s("h3",{attrs:{id:"_1-什么是类："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是类："}},[t._v("#")]),t._v(" 1.什么是类：")]),t._v(" "),s("p",[t._v("类实际上是个“特殊的函数”，就像你能够定义的函数表达式和函数声明一样，类语法有两个组成部分：类表达式和类声明。")]),t._v(" "),s("h3",{attrs:{id:"_2-类声明："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-类声明："}},[t._v("#")]),t._v(" 2.类声明：")]),t._v(" "),s("p",[t._v("定义一个类的一种方法是使用一个类声明。要声明一个类，你可以使用带有class关键字的类名")]),t._v(" "),s("h3",{attrs:{id:"_3-类声明和函数声明的区别："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-类声明和函数声明的区别："}},[t._v("#")]),t._v(" 3.类声明和函数声明的区别：")]),t._v(" "),s("p",[t._v("1.函数声明会提升，类声明不会。")]),t._v(" "),s("h3",{attrs:{id:"_4-类表达式："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-类表达式："}},[t._v("#")]),t._v(" 4.类表达式：")]),t._v(" "),s("p",[t._v("一个类表达式是定义一个类的另一种方式。类表达式可以是被命名的或匿名的。赋予一个命名类表达式的名称是类的主体的本地名称")])])}],!1,null,null,null);a.default=e.exports}}]);